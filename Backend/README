Please run these in the terminal in the file directory before running the app:

First in Pg Admin run this Query: 


"-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.advisors_consultants
(
    advisor_id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    email character varying(100) COLLATE pg_catalog."default" NOT NULL,
    specialization character varying(100) COLLATE pg_catalog."default",
    years_of_experience integer,
    rating double precision,
    consultation_fees numeric(10, 2),
    institution_id integer,
    availability json,
    profile_picture character varying(255) COLLATE pg_catalog."default",
    bio text COLLATE pg_catalog."default",
    languages text[] COLLATE pg_catalog."default",
    CONSTRAINT advisors_consultants_pkey PRIMARY KEY (advisor_id),
    CONSTRAINT advisors_consultants_email_key UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS public.authentication_tokens
(
    token_id serial NOT NULL,
    user_id integer,
    token character varying(255) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    expires_at timestamp without time zone NOT NULL,
    is_valid boolean DEFAULT true,
    CONSTRAINT authentication_tokens_pkey PRIMARY KEY (token_id)
);

CREATE TABLE IF NOT EXISTS public.blog_comments
(
    comment_id serial NOT NULL,
    post_id integer,
    user_id integer,
    content text COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT blog_comments_pkey PRIMARY KEY (comment_id)
);

CREATE TABLE IF NOT EXISTS public.blog_posts
(
    post_id serial NOT NULL,
    title character varying(200) COLLATE pg_catalog."default" NOT NULL,
    content text COLLATE pg_catalog."default" NOT NULL,
    author character varying(100) COLLATE pg_catalog."default",
    date_published timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    category character varying(50) COLLATE pg_catalog."default",
    image_url character varying(255) COLLATE pg_catalog."default",
    institution_id integer,
    CONSTRAINT blog_posts_pkey PRIMARY KEY (post_id)
);

CREATE TABLE IF NOT EXISTS public.bookmarks
(
    bookmark_id serial NOT NULL,
    user_id integer,
    institution_id integer,
    date_added timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT bookmarks_pkey PRIMARY KEY (bookmark_id),
    CONSTRAINT bookmarks_user_id_institution_id_key UNIQUE (user_id, institution_id)
);

CREATE TABLE IF NOT EXISTS public.bus_routes
(
    route_id serial NOT NULL,
    dropoff_time time without time zone,
    pickup_time time without time zone,
    pickup_location character varying(100) COLLATE pg_catalog."default",
    end_location character varying(100) COLLATE pg_catalog."default",
    start_location character varying(100) COLLATE pg_catalog."default",
    bus_fees numeric(10, 2),
    stops text COLLATE pg_catalog."default",
    route_name character varying(100) COLLATE pg_catalog."default",
    institution_id integer,
    available_seats integer,
    schedule_days character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT bus_routes_pkey PRIMARY KEY (route_id)
);

CREATE TABLE IF NOT EXISTS public.community_memberships
(
    membership_id serial NOT NULL,
    user_id integer,
    room_id integer,
    join_date timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT community_memberships_pkey PRIMARY KEY (membership_id),
    CONSTRAINT community_memberships_user_id_room_id_key UNIQUE (user_id, room_id)
);

CREATE TABLE IF NOT EXISTS public.community_messages
(
    message_id serial NOT NULL,
    room_id integer,
    user_id integer,
    content text COLLATE pg_catalog."default" NOT NULL,
    "timestamp" timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    is_read boolean DEFAULT false,
    CONSTRAINT community_messages_pkey PRIMARY KEY (message_id)
);

CREATE TABLE IF NOT EXISTS public.community_rooms
(
    room_id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    member_count integer DEFAULT 0,
    created_date timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    last_activity timestamp without time zone,
    CONSTRAINT community_rooms_pkey PRIMARY KEY (room_id)
);

CREATE TABLE IF NOT EXISTS public.courses
(
    course_id serial NOT NULL,
    course_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    instructor character varying(100) COLLATE pg_catalog."default",
    credits integer,
    duration character varying(50) COLLATE pg_catalog."default",
    course_description text COLLATE pg_catalog."default",
    program_id integer,
    CONSTRAINT courses_pkey PRIMARY KEY (course_id)
);

CREATE TABLE IF NOT EXISTS public.documents
(
    document_id serial NOT NULL,
    document_type character varying(50) COLLATE pg_catalog."default",
    upload_date timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    user_id integer,
    application_id integer,
    file_url character varying(255) COLLATE pg_catalog."default",
    file_name character varying(255) COLLATE pg_catalog."default",
    file_size integer,
    status character varying(50) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    CONSTRAINT documents_pkey PRIMARY KEY (document_id)
);

CREATE TABLE IF NOT EXISTS public.educational_programs
(
    program_id serial NOT NULL,
    duration character varying(50) COLLATE pg_catalog."default",
    tuition_fees numeric(10, 2),
    program_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    level character varying(50) COLLATE pg_catalog."default",
    curriculum_details text COLLATE pg_catalog."default",
    institution_id integer,
    description text COLLATE pg_catalog."default",
    start_date date,
    application_deadline date,
    requirements text COLLATE pg_catalog."default",
    capacity integer,
    CONSTRAINT educational_programs_pkey PRIMARY KEY (program_id)
);

COMMENT ON COLUMN public.educational_programs.capacity
    IS 'Maximum number of students that can be enrolled';

CREATE TABLE IF NOT EXISTS public.enrollment_applications
(
    application_id serial NOT NULL,
    application_date timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    status character varying(50) COLLATE pg_catalog."default",
    required_documents text COLLATE pg_catalog."default",
    user_id integer,
    program_id integer,
    CONSTRAINT enrollment_applications_pkey PRIMARY KEY (application_id)
);

CREATE TABLE IF NOT EXISTS public.faq_help_center
(
    faq_id serial NOT NULL,
    question text COLLATE pg_catalog."default" NOT NULL,
    answer text COLLATE pg_catalog."default",
    category character varying(50) COLLATE pg_catalog."default",
    date_created timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    popularity integer DEFAULT 0,
    institution_id integer,
    is_published boolean DEFAULT true,
    CONSTRAINT faq_help_center_pkey PRIMARY KEY (faq_id)
);

CREATE TABLE IF NOT EXISTS public.institution_categories
(
    category_id serial NOT NULL,
    category_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT institution_categories_pkey PRIMARY KEY (category_id),
    CONSTRAINT institution_categories_category_name_key UNIQUE (category_name)
);

CREATE TABLE IF NOT EXISTS public.institution_category_mappings
(
    mapping_id serial NOT NULL,
    institution_id integer,
    category_id integer,
    CONSTRAINT institution_category_mappings_pkey PRIMARY KEY (mapping_id),
    CONSTRAINT institution_category_mappings_institution_id_category_id_key UNIQUE (institution_id, category_id)
);

CREATE TABLE IF NOT EXISTS public.institution_facilities
(
    facility_id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    institution_id integer,
    CONSTRAINT institution_facilities_pkey PRIMARY KEY (facility_id)
);

CREATE TABLE IF NOT EXISTS public.institution_fees
(
    institution_fees_id serial NOT NULL,
    price numeric(10, 2),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    institution_id integer,
    CONSTRAINT institution_fees_pkey PRIMARY KEY (institution_fees_id)
);

CREATE TABLE IF NOT EXISTS public.institution_images
(
    image_id serial NOT NULL,
    image_url text COLLATE pg_catalog."default" NOT NULL,
    is_primary boolean DEFAULT false,
    institution_id integer,
    CONSTRAINT institution_images_pkey PRIMARY KEY (image_id)
);

CREATE TABLE IF NOT EXISTS public.institutions
(
    institution_id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    location character varying(100) COLLATE pg_catalog."default",
    curriculum text COLLATE pg_catalog."default",
    reputation_score double precision,
    contact_info text COLLATE pg_catalog."default",
    type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    website character varying(255) COLLATE pg_catalog."default",
    contact_email character varying(100) COLLATE pg_catalog."default",
    contact_phone character varying(50) COLLATE pg_catalog."default",
    rating double precision DEFAULT 0,
    total_reviews integer DEFAULT 0,
    description text COLLATE pg_catalog."default",
    password character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT institutions_pkey PRIMARY KEY (institution_id)
);

COMMENT ON TABLE public.institutions
    IS 'Educational institutions including universities and schools';

COMMENT ON COLUMN public.institutions.rating
    IS 'Average rating from 0 to 5 based on user reviews';

CREATE TABLE IF NOT EXISTS public.interviews
(
    interview_id serial NOT NULL,
    interview_date timestamp without time zone,
    interview_price numeric(10, 2),
    application_id integer,
    CONSTRAINT interviews_pkey PRIMARY KEY (interview_id)
);

CREATE TABLE IF NOT EXISTS public.notifications
(
    notification_id serial NOT NULL,
    user_id integer,
    title character varying(100) COLLATE pg_catalog."default" NOT NULL,
    message text COLLATE pg_catalog."default" NOT NULL,
    is_read boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    type character varying(50) COLLATE pg_catalog."default",
    related_id integer,
    CONSTRAINT notifications_pkey PRIMARY KEY (notification_id)
);

CREATE TABLE IF NOT EXISTS public.password_reset_tokens
(
    reset_id serial NOT NULL,
    user_id integer,
    token character varying(255) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    expires_at timestamp without time zone NOT NULL,
    is_used boolean DEFAULT false,
    CONSTRAINT password_reset_tokens_pkey PRIMARY KEY (reset_id),
    CONSTRAINT password_reset_tokens_token_key UNIQUE (token)
);

CREATE TABLE IF NOT EXISTS public.payment_methods
(
    method_id serial NOT NULL,
    user_id integer,
    card_number character varying(19) COLLATE pg_catalog."default",
    card_holder character varying(100) COLLATE pg_catalog."default",
    expiry_date character varying(7) COLLATE pg_catalog."default",
    card_type character varying(20) COLLATE pg_catalog."default",
    is_default boolean DEFAULT false,
    last_used timestamp without time zone,
    payment_token character varying(255) COLLATE pg_catalog."default",
    provider character varying(50) COLLATE pg_catalog."default",
    encrypted_data text COLLATE pg_catalog."default",
    iv text COLLATE pg_catalog."default",
    CONSTRAINT payment_methods_pkey PRIMARY KEY (method_id)
);

CREATE TABLE IF NOT EXISTS public.payment_transactions
(
    transaction_id serial NOT NULL,
    payment_type character varying(50) COLLATE pg_catalog."default",
    amount numeric(10, 2),
    transaction_date timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    user_id integer,
    institution_id integer,
    CONSTRAINT payment_transactions_pkey PRIMARY KEY (transaction_id)
);

CREATE TABLE IF NOT EXISTS public.regulatory_bodies
(
    regulatory_body_id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    contact_info text COLLATE pg_catalog."default",
    oversight_area character varying(100) COLLATE pg_catalog."default",
    regulations text COLLATE pg_catalog."default",
    CONSTRAINT regulatory_bodies_pkey PRIMARY KEY (regulatory_body_id)
);

CREATE TABLE IF NOT EXISTS public.required_documents
(
    document_type_id serial NOT NULL,
    program_id integer,
    document_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    is_mandatory boolean DEFAULT true,
    CONSTRAINT required_documents_pkey PRIMARY KEY (document_type_id)
);

CREATE TABLE IF NOT EXISTS public.reviews
(
    review_id serial NOT NULL,
    rating integer,
    comment text COLLATE pg_catalog."default",
    review_date timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    user_id integer,
    institution_id integer,
    title character varying(100) COLLATE pg_catalog."default",
    CONSTRAINT reviews_pkey PRIMARY KEY (review_id)
);

CREATE TABLE IF NOT EXISTS public.scholarship_applications
(
    application_id serial NOT NULL,
    user_id integer,
    scholarship_id integer,
    application_date timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    status character varying(50) COLLATE pg_catalog."default" DEFAULT 'Pending'::character varying,
    CONSTRAINT scholarship_applications_pkey PRIMARY KEY (application_id),
    CONSTRAINT scholarship_applications_user_id_scholarship_id_key UNIQUE (user_id, scholarship_id)
);

CREATE TABLE IF NOT EXISTS public.scholarships
(
    scholarship_id serial NOT NULL,
    application_deadline date,
    scholarship_amount numeric(10, 2),
    eligibility_criteria text COLLATE pg_catalog."default",
    scholarship_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    institution_id integer,
    description text COLLATE pg_catalog."default",
    requirements text COLLATE pg_catalog."default",
    CONSTRAINT scholarships_pkey PRIMARY KEY (scholarship_id)
);

CREATE TABLE IF NOT EXISTS public.search_filters
(
    filter_id serial NOT NULL,
    filter_type character varying(50) COLLATE pg_catalog."default",
    options text COLLATE pg_catalog."default",
    CONSTRAINT search_filters_pkey PRIMARY KEY (filter_id)
);

CREATE TABLE IF NOT EXISTS public.search_history
(
    history_id serial NOT NULL,
    user_id integer,
    search_query text COLLATE pg_catalog."default" NOT NULL,
    search_date timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT search_history_pkey PRIMARY KEY (history_id)
);

CREATE TABLE IF NOT EXISTS public.user_settings
(
    setting_id serial NOT NULL,
    user_id integer,
    language character varying(20) COLLATE pg_catalog."default" DEFAULT 'English'::character varying,
    theme character varying(20) COLLATE pg_catalog."default" DEFAULT 'Light'::character varying,
    notification_preferences jsonb,
    CONSTRAINT user_settings_pkey PRIMARY KEY (setting_id),
    CONSTRAINT user_settings_user_id_key UNIQUE (user_id)
);

CREATE TABLE IF NOT EXISTS public.users
(
    user_id serial NOT NULL,
    email character varying(100) COLLATE pg_catalog."default" NOT NULL,
    first_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    last_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    password character varying(255) COLLATE pg_catalog."default" NOT NULL,
    national_id character varying(20) COLLATE pg_catalog."default",
    address character varying(150) COLLATE pg_catalog."default",
    gender character varying(10) COLLATE pg_catalog."default",
    join_date timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    profile_picture character varying(255) COLLATE pg_catalog."default",
    bio text COLLATE pg_catalog."default",
    birth_date date,
    age integer,
    CONSTRAINT users_pkey PRIMARY KEY (user_id),
    CONSTRAINT unique_email UNIQUE (email),
    CONSTRAINT unique_national_id UNIQUE (national_id)
);"



Second install these:
1- npm install express pg 
2- npm install --save-dev nodemon dotenv 

